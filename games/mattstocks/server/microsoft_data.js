// Closing price and volume moved
const data = [
[123.68, 27],
[125.73, 17],
[124.94, 23],
[126.16, 23],
[126.24, 14],
[126.18, 24],
[127.67, 15],
[126.9, 15],
[126.22, 24],
[128.07, 26],
[128.93, 30],
[126.02, 25],
[124.73, 25],
[123.35, 34],
[127.13, 31],
[125.5, 27],
[125.51, 28],
[125.52, 36],
[128.15, 24],
[128.9, 25],
[126.21, 27],
[127.88, 27],
[130.6, 24],
[129.77, 16],
[129.89, 23],
[129.15, 38],
[125.01, 30],
[125.44, 24],
[123.76, 15],
[123.37, 28],
[121.77, 19],
[120.77, 14],
[121.05, 16],
[120.95, 20],
[120.33, 14],
[120.19, 15],
[119.28, 17],
[119.93, 15],
[119.89, 16],
[119.36, 20],
[119.97, 22],
[119.19, 16],
[119.02, 20],
[117.94, 25],
[116.93, 18],
[116.77, 23],
[117.91, 26],
[117.66, 27],
[117.05, 32],
[120.22, 30],
[117.52, 26],
[117.65, 35],
[117.57, 31],
[115.91, 54],
[114.59, 30],
[114.5, 35],
[113.62, 26],
[112.83, 25],
[110.51, 23],
[110.39, 25],
[111.75, 18],
[111.7, 19],
[112.26, 26],
[112.53, 21],
[112.03, 29],
[112.17, 21],
[112.36, 22],
[111.59, 24],
[110.97, 28],
[109.41, 29],
[107.15, 22],
[108.17, 18],
[108.22, 27],
[106.9, 22],
[106.81, 18],
[106.89, 25],
[105.25, 19],
[105.67, 21],
[105.27, 30],
[106.03, 21],
[107.22, 27],
[105.74, 31],
[102.78, 35],
[104.43, 55],
[106.38, 47],
[102.94, 31],
[105.08, 29],
[107.17, 31],
[106.2, 23],
[106.71, 26],
[105.68, 32],
[107.71, 37],
[106.12, 27],
[105.38, 30],
[105.01, 32],
[102.05, 27],
[102.8, 28],
[103.6, 30],
[104.27, 32],
[102.8, 31],
[102.06, 36],
[101.93, 44],
[97.4, 42],
[101.12, 35],
[101.57, 33],
[100.39, 38],
[101.18, 49],
[100.56, 51],
[94.13, 44],
[98.23, 111],
[101.51, 70],
[103.69, 68],
[103.97, 48],
[102.89, 57],
[106.03, 47],
[109.45, 31],
[109.08, 36],
[108.59, 42],
[107.59, 40],
[104.82, 44],
[109.19, 48],
[108.52, 45],
[112.09, 34],
[110.89, 34],
[110.19, 28],
[111.12, 46],
[107.14, 29],
[106.47, 32],
[103.07, 14],
[103.11, 28],
[101.71, 64],
[104.62, 43],
[108.29, 33],
[107.28, 38],
[104.97, 39],
[106.94, 35],
[106.87, 34],
[109.57, 32],
[111.75, 25],
[111.96, 38],
[107.72, 24],
[107.51, 28],
[106.16, 38],
[105.92, 33],
[106.81, 51],
[103.73, 65],
[103.85, 55],
[106.96, 55],
[108.3, 62],
[102.32, 63],
[108.1, 44],
[109.63, 26],
[108.66, 33],
[108.5, 32],
[110.71, 26],
[111, 31],
[107.6, 32],
[109.57, 47],
[105.91, 64],
[106.16, 61],
[112.26, 26],
[110.85, 29],
[112.13, 29],
[112.79, 34],
[115.17, 16],
[115.15, 20],
[115.61, 19],
[114.37, 21],
[114.41, 19],
[113.98, 19],
[114.45, 21],
[114.67, 25],
[114.26, 70],
[113.57, 24],
[111.7, 22],
[113.21, 22],
[112.14, 20],
[113.37, 18],
[112.91, 25],
[111.71, 19],
[111.24, 24],
[109.38, 20],
[108.21, 22],
[108.74, 23],
[108.49, 33],
[111.71, 23],
[112.33, 23],
[111.95, 23],
[112.02, 21],
[110.26, 19],
[109.6, 19],
[108.4, 17],
[107.56, 18],
[107.06, 18],
[105.98, 23],
[106.87, 17],
[107.58, 18],
[107.64, 21],
[107.66, 30],
[109.56, 17],
[108.21, 18],
[109, 18],
[109.67, 14],
[109.49, 15],
[108.88, 16],
[108.13, 20],
[108.04, 19],
[107.57, 26],
[106.28, 24],
[106.08, 27],
[105.37, 34],
[107.68, 37],
[109.62, 31],
[110.83, 31],
[107.66, 26],
[107.97, 29],
[106.27, 56],
[104.4, 38],
[105.12, 29],
[105.95, 26],
[104.91, 21],
[105.43, 25],
[104.19, 24],
[101.98, 19],
[102.12, 19],
[101.85, 16],
[101.16, 18],
[99.76, 19],
[99.05, 15],
[100.01, 19],
[98.61, 28],
[98.63, 27],
[97.54, 31],
[99.08, 27],
[98.39, 35],
[100.41, 39],
[101.14, 22],
[101.87, 26],
[100.86, 28],
[100.86, 23],
[100.13, 66],
[101.42, 25],
[100.85, 29],
[101.31, 18],
[101.05, 23],
[101.63, 22],
[100.88, 28],
[102.49, 21],
[102.19, 23],
[101.67, 27],
[100.79, 29],
[98.84, 34],
];

const max_pri = data.reduce((p, v) =>  p > v[0] ? p : v[0] );
const max_vol = data.reduce((p, v) =>  p > v[1] ? p : v[1] );
const min_pri = data.reduce((p, v) =>  p < v[0] ? p : v[0] );
const min_vol = data.reduce((p, v) =>  p < v[1] ? p : v[1] );
const pri_range = max_pri - min_pri;
const vol_range = max_vol - min_vol;

function scaleUp(step) { // denormalize
    return [
        step[0] * pri_range + min_pri,
        step[1] * vol_range + min_vol,
    ];
}


module.exports = {
    data:data.reverse(),
    scaleup: scaleUp,
    scaledown: function(step) { // normalize
        return [
            (step[0] - min_pri) / pri_range,
            (step[1] - min_vol) / vol_range,
        ];
    },
    getPrice: function(step) {
        return Math.round(scaleUp(step)[0]);
    }
};